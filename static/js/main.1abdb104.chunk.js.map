{"version":3,"sources":["components/Nav.js","components/GifsLoader.js","components/SortAndFilter.js","components/Search.js","App.js","serviceWorker.js","index.js","secrets.js"],"names":["Nav","react_default","a","createElement","AppBar_default","title","GifsLoader","gifs","this","props","GridList","cols","cellHeight","spacing","map","gif","key","id","subtitle","rating","src","images","downsized_large","url","alt","Component","SortAndFilter","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","sort","catagory","order","updateGifs","b","Date","filter","MPPA","filteredGifs","setState","ratingErr","setTimeout","state","_this2","Button_default","variant","color","onClick","Search","componentDidMount","data","axios","get","concat","API","then","gifArray","catch","err","console","log","onSearchChange","evt","searchParamaters","replace","toLowerCase","pictureAmount","target","value","defineProperty","name","onNumberChange","index","onRatingChange","TextField_default","searchText","onChange","floatingLabelText","SelectField_default","MenuItem_default","primaryText","SortAndFilter_SortAndFilter","GifsLoader_GifsLoader","App","MuiThemeProvider_default","components_Nav","Search_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.1abdb104.chunk.js","sourcesContent":["import React from 'react'\nimport AppBar from 'material-ui/AppBar'\n\nconst Nav = () => <AppBar title=\"Project Gif\" />\n\nexport default Nav\n","import React, { Component } from 'react'\nimport {GridList, GridTile} from 'material-ui/GridList'\n\nexport default class GifsLoader extends Component {\n  //Material-UI was used to allow the gifs to take up three columns, a number which I believe is perfect amount for user experience.\n  //This is a loading screen in the 'else' condition in case the API query takes a while to load.\n  render() {\n\n    const gifs = this.props.gifs\n\n    if (gifs){\n      return <GridList cols={3} cellHeight={'auto'} spacing={6}>\n                {gifs.map(gif => (\n                  <GridTile \n                  key={gif.id}\n                  title={gif.title}\n                  subtitle={gif.rating}\n                  >\n                    <img src={gif.images.downsized_large.url} alt={''} />         \n                  </GridTile>\n                ))}\n              </GridList>\n    } else {\n      return <GridList cols={1} cellHeight={'auto'}>\n                <GridTile key={'TvLuZ00OIADoQ'}>\n                  <img src={'https://media.giphy.com/media/TvLuZ00OIADoQ/giphy.gif'} alt={''} />\n                </GridTile>\n            </GridList>\n    }\n  }\n}\n","import React, { Component } from 'react'\nimport Button from '@material-ui/core/Button';\n\nexport default class SortAndFilter extends Component {\n\n  constructor(){\n    super()\n    this.state = {\n      ratingErr: 'FILTER BY RATING'//state for the fourth button below.\n    }\n  }\n\n  sort = (catagory, order) => {\n    const updateGifs = this.props.updateGifs\n    const gifs = this.props.gifs\n    const sortedGifs = order === 'newest' ?\n    gifs.sort((a, b) => new Date(b[catagory]) - new Date(a[catagory])) :\n    gifs.sort((a, b) => new Date(a[catagory]) - new Date(b[catagory])) \n    //ternary operator used to determine whether the gif array should be newest to oldest or oldest to newest.\n\n    return updateGifs(sortedGifs)//function that infuences the gif array in search.\n  }\n\n  filter = () => {\n    const updateGifs = this.props.updateGifs\n    const gifs = this.props.gifs\n    const MPPA = this.props.MPPA\n    const filteredGifs = gifs.filter((gif) => gif.rating === MPPA)\n    \n    if(MPPA === ''){ //empty quotes if the user does not toggle a rating on the Search component\n      this.setState({ratingErr: 'SELECT A RATING ABOVE THEN CLICK'}, () => {\n        setTimeout(() => {\n          this.setState({ratingErr: 'FILTER BY RATING'})\n        }, 3000)//the button will display 'Select a rating above then click' for 3 seconds then switches to 'FILTER BY RATING'\n      })\n    } else {\n      return updateGifs(filteredGifs)//function that infuences the gif array in search.\n    }\n  }\n  \n  render() {\n\n    return (\n      <div>\n        <Button variant=\"outlined\" color=\"primary\" onClick={() => this.sort('import_datetime', 'newest')}>\n          Newest\n        </Button>\n\n        <Button variant=\"outlined\" color=\"primary\" onClick={() => this.sort('import_datetime')}>\n          Oldest\n        </Button>\n\n        <Button variant=\"outlined\" color=\"primary\" onClick={() => this.sort('trending_datetime', 'newest')}>\n          Trending\n        </Button>\n\n        <Button variant=\"outlined\" color=\"primary\" onClick={() => this.filter()}>\n          {this.state.ratingErr}\n        </Button>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport API from '../secrets.js'\nimport axios from 'axios'\nimport GifsLoader from './GifsLoader'\nimport SortAndFilter from './SortAndFilter'\nimport TextField from 'material-ui/TextField'\nimport Selectfield from 'material-ui/SelectField'\nimport MenuItem from 'material-ui/MenuItem'\nimport {GridList, GridTile} from 'material-ui/GridList'\n\n\n\n\nexport default class Search extends Component {\n\n    constructor(){\n        super()\n        this.state = {\n            searchParamaters: '', //User inputted query for the API\n            gifs: [],\n            pictureAmount: 6,\n            MPPA: '', //Maturity rating for the gifs\n        }\n    }\n\n    componentDidMount = () => {\n        const {data} = axios.get(`https://api.giphy.com/v1/gifs/trending?&api_key=${API}&limit=24`) //This are the default(currently trending) gifs for the user\n            .then(gifArray => this.setState({gifs: gifArray.data.data}))\n            .catch(err => console.log(err))\n\n        this.setState({gifs: data})\n    }\n\n\n\n    onSearchChange = (evt) => {\n        const searchParamaters = this.state.searchParamaters.replace(' ', '+').toLowerCase()//Giphy queries only accept '+' in lieu of spaces and only in lowercase. e.g. 'Ryan Gosling' -> 'ryan+gosling'.\n        const pictureAmount = this.state.pictureAmount\n        const MPPA = this.state.MPPA //the rating change brings everything up to and including the rating. \n        const value = evt.target.value // This is to keep track of an empty user input for conditional rendering. \n                                      //It was necessary to contain this in a variable due to issues in using evt.target.value rather than a variable.\n        if (value !== ''){ \n            this.setState({[evt.target.name]: evt.target.value}, () => {\n                axios.get(`https://api.giphy.com/v1/gifs/search?q=${searchParamaters}&api_key=${API}&limit=${pictureAmount}&rating=${MPPA}`)\n                    .then(gifArray => this.setState({gifs: gifArray.data.data}))\n                    .catch(err => console.log(err))\n            })\n        } else {\n            this.componentDidMount()\n        }\n    }\n\n    onNumberChange = (evt, index, value) => {\n        this.setState({pictureAmount: value})\n    } //This leverages the 'value' parameter from Material UI's <SelectField /> instead of the usual evt.target.value. \n     //This is also the reason why I have two similar event handlers instead of having one handler and using setState({[evt.target.name]: evt.target.value}).\n\n    onRatingChange = (evt, index, value) => {\n        this.setState({MPPA: value})\n    } //This leverages the 'value' parameter from Material UI's <SelectField /> instead of the usual evt.target.value. \n     //This is also the reason why I have two similar event handlers instead of having one handler and using setState({[evt.target.name]: evt.target.value}).\n\n    updateGifs = (gifs) => {\n        this.setState({gifs})\n    } //This function is sent as props to the SortAndFilter component so that 4 different buttons can utilize it to update state.\n\n    render() {\n        return (\n        <div>\n            <GridList cols={3} cellHeight={'auto'}>\n                <GridTile>\n                    <TextField\n                        name= 'searchParamaters'\n                        value={this.state.searchText}\n                        onChange={this.onSearchChange}\n                        floatingLabelText = 'Gifs in a Jiffy'\n                    />\n                </GridTile>\n\n                <GridTile>\n                    <Selectfield name='MPPA-style rating' floatingLabelText='Rating' value={this.state.MPPA} onChange={this.onRatingChange}>\n                        <MenuItem value={''} primaryText={''} />\n                        <MenuItem value={'y'} primaryText={'y'} />\n                        <MenuItem value={'g'} primaryText={'g'} />\n                        <MenuItem value={'pg'} primaryText={'pg'} />\n                        <MenuItem value={'pg-13'} primaryText={'pg-13'} />\n                        <MenuItem value={'r'} primaryText={'r'} />\n                    </Selectfield>\n                </GridTile>\n\n                <GridTile>\n                    <Selectfield name='pictureAmount' floatingLabelText='How many gifs?' value={this.state.pictureAmount} onChange={this.onNumberChange}>\n                        <MenuItem value={6} primaryText={'6'} />\n                        <MenuItem value={9} primaryText={'9'} />\n                        <MenuItem value={12} primaryText={'12'} />\n                    </Selectfield>\n                </GridTile>\n\n            </GridList>\n\n            <GridList cellHeight={'auto'}>\n                <GridTile>\n                    <SortAndFilter updateGifs={this.updateGifs} gifs={this.state.gifs} MPPA={this.state.MPPA} />\n                </GridTile>\n            </GridList>\n\n            <GifsLoader gifs={this.state.gifs} />\n        </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider'\nimport Nav from './components/Nav.js'\nimport Search from './components/Search.js'\n\nclass App extends Component {\n  render() {\n    return (\n      <MuiThemeProvider>\n        <div>\n          <Nav />\n          <Search />\n        </div>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const API = 'FCSB7IlSV6tLLJ9bgsRdsi6cMaodneDq'\n\nmodule.exports = API\n"],"sourceRoot":""}